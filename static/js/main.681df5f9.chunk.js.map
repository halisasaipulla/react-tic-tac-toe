{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","onClickCallback","id","value","Board","squareList","squares","concat","map","square","generateSquareComponents","generateSquares","currentId","row","push","col","App","useState","setSquares","currentPlayer","setCurrentPlayer","winner","setWinner","checkForWinner","undefined","updateSquare","newBoard","Math","floor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.681df5f9.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {\n  // For Wave 1 enable this \n  //  Component to alert a parent \n  //  component when it's clicked on.\n    const addClick = () => {\n        props.onClickCallback({id: props.id, value:props.value });\n};\n    return <button\n    className=\"square\" onClick={() => {addClick()}}>\n    {props.value}\n    </button>\n}\n\nSquare.propTypes = {\n    value: PropTypes.string.isRequired,\n    onClickCallback: PropTypes.func.isRequired,\n    id: PropTypes.number.isRequired,\n};\n\nexport default Square;\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  // Complete this for Wave 1\n  // squares is a 2D Array, but \n  //  you need to return a 1D array\n  //  of square components\n  const oneDarray = [].concat(...squares)\n  return oneDarray.map((square) => {\n      return <Square value={square.value} id={square.id} onClickCallback={onClickCallback} />\n  })\n\n}\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n//   console.log(squareList);\n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n// import Square from './components/Square';\n\nconst PLAYER_1 = 'x';\nconst PLAYER_2 = 'o';\n\nconst generateSquares = () => {\n    const squares = [];\n\n    let currentId = 0;\n\n    for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n        squares[row].push({\n        id: currentId,\n        value: '',\n        });\n        currentId += 1;\n    }\n    }\n\n    return squares;\n}\n\nconst App = () => {\n\n  // This starts state off as a 2D array of JS objects with\n  // empty value and unique ids.\n    const [squares, setSquares] = useState(generateSquares());\n    const [currentPlayer, setCurrentPlayer] = useState('x');\n    const [winner, setWinner] = useState('');\n    \n  // Wave 2\n  // You will need to create a method to change the square \n  //   When it is clicked on.\n  //   Then pass it into the squares as a callback\n    const handlingClick=(updateSquare)=>{\n        const newBoard = [...squares]\n        const row = Math.floor(updateSquare.id/3)\n        const col = updateSquare.id%3\n        if (newBoard[row][col].value===''){\n            updateSquare.value = currentPlayer\n            newBoard[row][col]=updateSquare\n        \n                if (currentPlayer === 'x') {\n                setCurrentPlayer(PLAYER_2);\n                } else {\n                    setCurrentPlayer(PLAYER_1)\n        \n        };\n\n        }\n        setSquares(newBoard)\n        setWinner(checkForWinner());\n        \n    \n    }\n\n    const checkForWinner = () => {\n    // Complete in Wave 3\n    // You will need to:\n    // 1. Go accross each row to see if \n    //    3 squares in the same row match\n    //    i.e. same value\n    // 2. Go down each column to see if\n    //    3 squares in each column match\n    // 3. Go across each diagonal to see if \n    //    all three squares have the same value.\n        if (squares[0][0].value === squares[1][1].value &&\n            squares[2][2].value === squares[1][1].value &&\n            squares[1][1].value !== '') {\n            return squares[0][0].value;\n        }else if(squares[0][2].value === squares[1][1].value &&\n            squares[2][0].value === squares[1][1].value &&\n            squares[1][1].value !== '') {\n            return squares[0][2].value;\n        }else{\n            for (let row=0; row<3; row++){\n            if(squares[row][0].value===squares[row][1].value && \n                squares[row][0].value===squares[row][2].value && squares[row][0].value !==''){\n                return squares[row][0].value;\n                }\n        }\n        for (let col=0; col<3; col++){\n            if (squares[0][col].value===squares[1][col].value &&\n                squares[0][col].value===squares[2][col].value && squares[0][col].value !==''){\n                return squares[0][col].value;\n        }\n    }\n    }\n    }\n        \n\n    const resetGame = () => {\n    // Complete in Wave 4\n        setSquares(generateSquares());\n        setCurrentPlayer('x');\n        setWinner('');\n    }\n\n    return (\n        <div className=\"App\">\n        <header className=\"App-header\">\n            <h1>React Tic Tac Toe</h1>\n            <h2>{winner === undefined ? `Current player is ${currentPlayer}` : `Winner is ${ winner }`}</h2>\n            <button onClick={resetGame}>Reset Game</button>\n        </header>\n        <main>\n            <Board squares={squares} onClickCallback={ handlingClick } />\n        </main>\n        </div>\n);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// ReactDOM.createRoot(\n//     document.getElementById('root')).render(\n//     <React.StrictMode>\n//         <App />\n//     </React.StrictMode>);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}